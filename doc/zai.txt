*zai.txt*      Zai.Vim AI Assistant 1.0      Last Updated: 2025-09-14


                    Zai.Vim AI Assistant   User Manual


ZAI.Vim PLUGIN                                          *zai* *zai-plugin*


1. Introduction .......................................  |zai-intro|
2. Installation Guide .................................  |zai-installation|
3. Zai Configuration ..................................  |zai-config|
4. VIM Commands .......................................  |zai-commands|
5. Chat Commands ......................................  |zai-chat-commands|
6. License ............................................  |zai-license|

==============================================================================
1. INTRODUCTION                                         *zai-intro*

Zai.Vim is a plugin that integrates an AI assistant directly into the Vim
editor, managing multiple simultaneously open AI chat sessions, logging
conversations, and allowing loading of logs to resume previous chats. Switch
freely, control at will.

- Flexible model and prompt switching
- Attachment support
- Multi-session support
- Session log saving, loading, and previewing

==============================================================================
2. INSTALLATION GUIDE                                   *zai-installation*

2.1 Requirements                                        *zai-requirements*
>
   - Vim 8.0+ or Neovim
   - Python 3.6+
   - AI API KEY
     - e.g., DeepSeek API Key (set in the `DEEPSEEK_API_KEY` environment variable)
   - Required Python packages:
     - `openai` (automatically installed if missing)
   - Optional iamcco/markdown-preview.nvim
<

2.2 Installation via Plugin Manager                     *zai-plugin-managers*

Using vim-plug: >
   Plug 'zighouse/zai'
<
Using Vundle: >
   Plugin 'zighouse/zai'
<
Using lazy.nvim (Neovim configuration example): >
   return {
       {
           "zighouse/zai.vim",
           config = function()
              vim.g.zai_default_model = "deepseek-chat"
           end
       }
   }
<
Manual Installation:

Commands to execute in the embedded terminal on Linux/Mac:
>
    pip install appdirs chardet openai
    mkdir -p ~/.vim/pack/plugins/start
    cd ~/.vim/pack/plugins/start
    git clone -n --depth=1 https://github.com/zighouse/zai.vim.git
    git checkout
<

Commands to execute in the embedded terminal on Windows:
>
    pip install appdirs chardet openai
    md %USERPROFILE%\vimfiles\pack\plugins\start
    cd %USERPROFILE%\vimfiles\pack\plugins\start
    git clone -n --depth=1 https://github.com/zighouse/zai.vim.git
    git checkout
<

Navigate to the installation directory and execute `git pull` to manually update.

Alternatively, download the zip package
[Zai.Vim](https://github.com/zighouse/zai.vim/archive/refs/heads/main.zip),
extract it, and place the zai.vim-main folder into the corresponding directory.

==============================================================================
3. ZAI CONFIGURATION                                    *zai-config*
                                                        *g:zai_log_dir*
g:zai_log_dir           Configures the save path for log files.

                        Default configuration:
                        * Linux/Mac: `~/.local/share/zai/log`
                        * Windows: `%USERPROFILE%\AppData\Local\zai\log`

                                                        *g:zai_lang*
g:zai_lang              Configures the UI language for Zai.
                        Defaults to English, or auto-selects based on the user environment.
                        To specify Chinese, configure as follows:
>
 let g:zai_lang = 'zh_CN.UTF-8'
<
Recommendation: Configure a new log storage path on Windows. The default log
path on Windows is hidden by the system and is inconvenient to use.

                                                        *g:zai_base_url*
g:zai_base_url          Configures the `base-url` for the AI service.
                        See |zai-chatcmd-model|.

                                                        *g:zai_api_key_name*
g:zai_api_key_name      Configures the `api-key-name` for the AI service.
                        See |zai-chatcmd-model|.
                        An API access key is required to connect to the AI
                        service. Users must pre-set an environment variable in
                        the operating system that contains this key.

                        The `api-key-name` here is the name of that environment
                        variable.

                  e.g.: On Linux, set the environment variable in `~/.bashrc`:
>
 DEEPSEEK_API_KEY=sk-********************************
<
                        Then you can use `DEEPSEEK_API_KEY` to complete this
                        configuration.

                                                        *g:zai_default_model*
g:zai_default_model     Configures the default model for the AI service.
                        See |zai-chatcmd-model|.

                                                        *g:zai_use_ai*
g:zai_use_ai            Configures the default AI service.
                        When an AI assistant configuration JSON file exists,
                        this parameter can be used to specify the default AI
                        assistant from the configuration file.

                                                        *zai-assistants.json*
Full path of the AI assistant configuration file:

* Linux/Mac: ~/.local/share/zai/assistants.json
* Windows: %USERPROFILE%\AppData\Local\Zai\assistants.json

A typical AI assistant configuration file content is as follows:
>
 [
     {
         "name": "deepseek",
         "base-url": "https://api.deepseek.com",
         "api-key-name" : "DEEPSEEK_API_KEY",
         "model" : ["deepseek-chat", "deepseek-reasoner"]
     },
     {
         "name": "Moonshot AI",
         "base-url": "https://api.moonshot.cn/v1",
         "api-key-name" : "MOONSHOT_API_KEY",
         "model" : [
             "kimi-k2-0905-preview",
             "kimi-thinking-preview"
         ]
     },
     {
         "name": "Volcano Ark",
         "base-url": "https://ark.cn-beijing.volces.com/api/v3",
         "api-key-name" : "VOLCES_API_KEY",
         "model" : [
             "doubao-seed-1-6-250615",
             "doubao-seed-1-6-thinking-250715"
         ]
     },
     {
         "name": "Silicon Flow",
         "base-url": "https://api.siliconflow.cn",
         "api-key-name" : "SILICONFLOW_API_KEY",
         "model" : [
             "deepseek-ai/DeepSeek-V3.1",
             "deepseek-ai/DeepSeek-R1",
             "moonshotai/Kimi-K2-Instruct-0905",
             "tencent/Hunyuan-MT-7B",
             "inclusionAI/Ling-mini-2.0",
             "ByteDance-Seed/Seed-OSS-36B-Instruct",
             "zai-org/GLM-4.5",
             "Qwen/Qwen3-Coder-480B-A35B-Instruct",
             "Qwen/Qwen3-235B-A22B-Thinking-2507",
             "Qwen/Qwen3-235B-A22B-Instruct-2507",
             "baidu/ERNIE-4.5-300B-A47B",
             "tencent/Hunyuan-A13B-Instruct",
             "MiniMaxAI/MiniMax-M1-80k"
         ]
     }
 ]
<

After providing the AI assistant configuration file as above, the following
example will default to applying Silicon Flow's k2 model.

>
 let g:zai_use_ai = "Silicon Flow"
 let g:model = "moonshotai/Kimi-K2-Instruct-0905"
<
The above uses the AI assistant and model names; indexes starting from 0 can
also be used.

==============================================================================
4. VIM COMMANDS                                         *zai-commands*

                                                        *:Zai*
:Zai                    Open the Zai chat interaction interface.
                        Available throughout VIM.
<leader>zo              Available in normal mode: <leader>zo;
                        available in command mode: :Zai.

:q                      Close the Zai chat interaction interface.
                        Only available within the Zai chat interface.

                                                        *:ZaiGo*
:ZaiGo                  Send the content in the input window.
                        Available throughout VIM.
<CR>                    Available in normal mode of the input window.

                                                        *zai-ui*
The Zai chat interaction interface consists of three parts:
 - Top: List window, managing the chat session list;
 - Middle: Display window, showing the chat interaction content;
 - Bottom: Input window, for questions and sending commands.
On the Zai interface, Zai's editing commands can be used. The chat session
list and chat content are prohibited from user modification.

Opening the interface defaults to creating the first Zai chat session, with
session IDs starting from 0.

After the user edits the request content in the input window and exits insert
mode, send it via <CR> (Enter key).  After sending, the input window is
automatically cleared and waits for the user's next input.

Zai displays both the user's sent requests and the remote assistant service's
responses or error messages in the display window.
By default, Zai enables logging and prompts the specific path of the current
chat's log file at the bottom of the displayed content.

Apart from occupying screen space for the interaction interface, Zai is
completely independent of other content loaded in VIM.
Users can close the Zai interface with :q to reclaim its screen space. At this
time, Zai does not pause but continues working in the background, e.g.,
continuing to receive unfinished responses. Users can reopen the background
Zai interaction interface at any time via the :Zai command.

                                                        *:ZaiHelp*
:help                   Open help for Zai. Only available in the Zai chat UI.

                                                        *:ZaiAdd*
:ZaiAdd                 Add selected content to the input window.
                        Available throughout VIM.
<leader>za              Available in visual mode: <leader>za; available from
                        visual mode entering command mode: :ZaiAdd.

                        Appends the content selected by the user in the
                        current VIM editing window as a content block to the
                        bottom of the input window and switches the editing
                        focus to the insertion point of the content block in
                        the input window. The user can perform any editing or
                        supplementation in the input window and send it after
                        the description is complete.

                                                        *:ZaiNew*
:ZaiNew                 Create a new chat. Only available in the Zai chat UI.
:new                    Creates a new Zai chat session and selects this new
                        chat. The content in the input window is not cleared
                        and can be sent directly to the new chat.

                                                        *:ZaiPrev*
:[count]ZaiPrev         Select the previous chat. Only available in the Zai
:[count]cp              chat interface.
                        count is an optional parameter, indicating the number
                        of items ahead of the currently selected item in the
                        chat list to select.  Defaults to selecting the
                        previous item.

                        In the list items, you can also move the cursor to the
                        desired item and select it via <CR> (Enter key).

                        When a chat session is selected, the display window is
                        replaced with the content of the selected chat. The
                        content in the input window is not cleared and is sent
                        directly to the selected chat.

                                                        *:ZaiNext*
:[count]ZaiNext         Select the next chat.
:[count]cn              Only available in the Zai chat interface.
                        count is an optional parameter,
                        functioning similarly to |:ZaiPrev|.

                                                        *:ZaiGoto*
:ZaiGoto id             Select the chat specified by id.
:cn id                  Only available in the Zai chat interface.
                        id is a required parameter, the index of the chat
                        listed in the list window.

                                                        *:ZaiPreview*
:ZaiPreview             Display chat content in a browser.
                        Only available in the Zai chat interface.
<leader>dp              Available in normal mode of the Zai chat interface.

                        Depends on the |:MarkdownPreview| command, requires
                        the plugin `iamcco/markdown-preview.nvim`.

                        Depends on the chat's logging functionality; chats
                        with logging disabled are not available.

                                                        *:ZaiLoad*
:ZaiLoad                Load the Zai chat log opened in the current window as
                        chat context.
<leader>zl              Available throughout VIM.

                        Zai can load previously recorded chat session logs
                        into a new chat as context, which will enable the AI
                        assistant in this chat to utilize this information in
                        subsequent responses. Users can use this method to
                        continue chats that did not meet expectations before.
                        For the chat log path, see |zai-ui| |zai-log|.

                                                        *:ZaiConfig*
:ZaiConfig              Open AI assistants configuration json file for edit.
                        See |zai-assistants.json|.

==============================================================================
5. CHAT COMMANDS                                        *zai-chat-commands*

In addition to the VIM commands |zai-commands| used in the Zai interaction
interface window, chat commands |zai-chat-commands| can also be used in the
to-be-sent content of the input window.

Chat commands primarily involve the working configuration of the AI assistant.

Unlike VIM commands, chat commands are not handled by VIM's windows or buffers
but are sent to the Zai AI assistant for processing in the background. Chat
commands can be sent to the Zai AI assistant alone or merged with the user's
request.

A chat command consists of three parts: the command prefix, the command name,
and the command parameters, for example:
>
 :file my-sort.cpp
 |-+-- -+---------
 | |    |
 | |    Command parameters
 | |
 | Command name
 |
 Chat command prefix character
<
By default, similar to VIM's command mode type, a half-width colon is used as
the chat command prefix. Users can change the current session's command prefix
via |zai-chat-command-prefix|.

                                                        *zai-chatcmd-preifx*
:->?                    Set the chat command prefix for the current session.
                        Chat command |zai-chat-commands|.
                        Only affects the current session. Changes the chat
                        command prefix character to a new character.

                        The default chat command prefix character is `:`.
                        Characters that can serve as prefixes include:
>
      : / ~ \ ; ! # $ % & ? @ ^ _ * + = , . < > ` ' " ( ) [ ] { }
<

                                                        *zai-chatcmd-help*
:help                   Display chat command help.
                        Chat command |zai-chat-commands|.
                        Prints help information for chat commands in the
                        display window.

                                                        *zai-chatcmd-exit*
:exit                   Force exit the remote AI service.
:quit                   Chat command |zai-chat-commands|.
                        When you want to cancel the connection to the remote
                        AI service, you can use the exit or quit chat command.

                                                        *zai-chatcmd-show*
:show `config`            Display the configuration items of the AI assistant.
                        Chat command |zai-chat-commands|.
                        The display content is printed in the display window.
                        If the user has not set a certain configuration item,
                        the system may print that the configuration item does
                        not exist.

                        Configurable items (config) that can be displayed are:

    `api-key-name`      AI API Key Name                  |zai-apikey|
    `base-url`          AI API Base URL                  |zai-baseurl|
    `model`             AI System Model                  |zai-chatcmd-model|
    `prompt`            AI System Prompt                 |zai-chatcmd-prompt|
    `temperature`       Creativity parameter, float,     |zai-chatcmd-params|
                      range [0,2].
    `max-tokens`        AI Max Tokens, integer
    `logprobs`          Top Token Probability, float, range [0,20]
    `top-p`             Top-P Tokens, float, range [0,1]
    `presence-penalty`  Repetition Penalty, float, range [-2,2]
    `frequence-panelty` Frequency Penalty, float, range [-2,2]
    `log-file`          Full path of the log file for    |zai-log|
                      the current chat
    `prefix`            Chat Command Prefix              |zai-chatcmd-prefix|

                                                        *zai-chatcmd-file*
:file `file-path`         Attach the text file specified by `file-path` to the
                        current chat's input request for reference.
                        Chat command |zai-chat-commands|.
:-file                  Clear all attachments.

                  Note: Attached text files will be part of the AI request
                        input and will be counted towards input token billing
                        by the AI service. When a file has been attached in a
                        chat, if you want to reference it in a new question,
                        you do not need to re-attach it; just mention the file
                        name.

                                                        *zai-chatcmd-baseurl*
:base-url `url`           Change the base-url used for the current chat's AI service.
                        Chat command |zai-chat-commands|.

                                                        *zai-chatcmd-keyname*
:api-key-name `key-name`  Change the API key used for the current chat.
                        Chat command |zai-chat-commands|.
                  Note: This uses the name of the environment variable pointing
                        to the key, not the key content itself.

                                                        *zai-chatcmd-model*
:model `model-name`       Specify the AI model for the current chat.
                        Chat command |zai-chat-commands|.
                        Change the AI system model used in the current chat.

                  Note: The allowed model names depend on the AI service
                        provided by the current `base-url`, which is not
                        provided by Zai.

                        Taking the service provided by deepseek as an example,
                        the corresponding `base-url` is https://api.deepseek.com,
                        which provides two optional models: `deepseek-chat`
                        and `deepseek-reasoner`.

                        Also can be configured globally.
                  e.g.: (See |zai-config|)
>
 let g:zai_base_url = "https://api.deepseek.com"
 let g:zai_api_key_name = "DEEPSEEK_API_KEY"
 let g:zai_default_model = "deepseek-chat"
<
                        The above configures the `base-url`, `api-key-name`,
                        and default AI model used when creating a new chat.
                        Afterwards, you can use the `:model` chat command to
                        change the content of the current chat. Even if you
                        have already used the `deepseek-chat` model for one
                        round of interaction, you can continue to change to
                        using `deepseek-reasoner` as the model for a new round
                        of interaction.
>
 :model deepseek-reasoner
<
                        When using other `base-url`s, there will generally be
                        different model names. For details, refer to the
                        service provider's API documentation. For another
                        example, here is the configuration for Silicon Flow:
>
 let g:zai_base_url = "https://api.siliconflow.cn"
 let g:zai_api_key_name = "SILICONFLOW_API_KEY"
 let g:zai_default_model = "Pro/moonshotai/Kimi-K2-Instruct-0905"
<
                  Note: After successfully applying an AI assistant using
                        `:use ai` or `g:zai_use_ai`, the `:model` session
                        command only allows selecting values within the
                        configured range.
                        See |zai-chatcmd-useai|, |g:zai_use_ai|

                                                        *zai-chatcmd-prompt*
:prompt `text`            Set a new prompt for the current chat.
                        Chat command |zai-chat-commands|.
:-prompt                Unset the previously set prompt
                        (use Zai's default prompt).

                        The prompt is a very important AI model configuration
                        that directly affects the quality of the answers
                        provided by the AI assistant.

                        When the prompt to be set is only one line, you can
                        use the single-line prompt setting method, for example:
>
 :prompt Act as a professional translator familiar with computer science.
<
                        When the prompt to be set exceeds one line, you need
                        to use block syntax to set it, for example:
>
 :prompt<<EOF
 As a code expert assistant, please analyze the problem step by step.
 When providing solutions, please use the format:
   ### [Title]
   [Step-by-step instructions]
   ### Summary: [One-sentence summary of the core]
 EOF
<

                                                        *zai-chatcmd-params*
:temperature `float`      Set the creativity parameter for the current chat.
                        Chat command |zai-chat-commands|.
                        Float, range [0,2]. The lower this parameter, the more
                        precise the AI response obtained.

:-temperature           Unset the previously set creativity parameter.
                        Chat command |zai-chat-commands|.

In addition to `temperature`, the following model parameters are also
supported for setting or unsetting:
    * `top_p`              Top-P Tokens, float, range [0,1]
    * `max_tokens`         AI Max Tokens, integer
    * `presence_penalty`   Repetition Penalty, float, range [-2,2]
    * `frequency_penalty`  Frequency Penalty, float, range [-2,2]
    * `logprobs`           Top Token Probability, float, range [0,20]

                                                        *zai-chatcmd-nolog*
:no-log                 Close chat logging. Chat command |zai-chat-commands|.
:-no-log                After chat logging is disabled, new content will no
                        longer be saved to the log.

                  Note: In the current version, preview is not available
                        after chat logging is disabled.  See |:ZaiPreview|.

                                                        *zai-chatcmd-useai*
:use ai `<name|idx>`                   Apply an item of AI assistant config.
:use ai `<name|idx>` model `<name|idx>`  Session command |zai-chat-commands|.
                                     You can use either the name or index.
                                     See |g:zai_use_ai|, |zai-assistants.json|

                        After successfully applying an AI assistant using the
                        `:use ai` session command, the `:model` session command
                        is affected and only allows selecting values from the
                        pre-configured model list of the AI assistant. See
                        |zai-chatcmd-model|.

:show ai `[<name|idx>]`   Display the content of an AI assistant. Session
                        command |zai-chat-commands|.
                        When `<name|idx>` is not provided, displays the
                        currently applied AI assistant.  See
                        |zai-chatcmd-useai|.

:list ai                List available AI assistants.
                        Session command |zai-chat-commands|.
                        See |zai-assistants.json|.

==============================================================================
6. LICENSE                                              *zai-license*

Released under the MIT License. For details, see:
https://github.com/zighouse/zai/blob/main/LICENSE

 vim:tw=78:ts=8:ft=help:norl:
